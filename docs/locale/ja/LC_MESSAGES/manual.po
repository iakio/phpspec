# 
msgid ""
msgstr ""
"Project-Id-Version: phpspec 2.1.x-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-05-16 23:35+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\..\manual\getting-started.rst:2
msgid "Getting Started"
msgstr ""

#: ..\..\manual\getting-started.rst:4
msgid ""
"Say you are building a tool that converts `Markdown "
"<http://en.wikipedia.org/wiki/Markdown>`_ into HTML. Well, that's a large "
"task. But you can work on simple things first and a design will emerge that "
"will reach all the necessary features."
msgstr ""

#: ..\..\manual\getting-started.rst:9
msgid ""
"What is the simplest thing you could add? It should convert a string line "
"into a paragraph with HTML markup, i.e. `\"Hi, there\"` would become "
"`\"<p>Hi, there</p>\"`."
msgstr ""

#: ..\..\manual\getting-started.rst:12
msgid ""
"So you can start by doing this. Well, not the boring bits. Let **phpspec** "
"take care of the boring stuff for you. You just need to tell **phpspec** you"
" will be working on the `Markdown` class."
msgstr ""

#: ..\..\manual\getting-started.rst:21
msgid ""
"You can also specify a fully qualified class name. Don\\'t forget that if "
"you use backslashes you need to pass the class name inside double quotes. "
"Alternatively you could use forward slashes and skip the quotes. **phpspec**"
" will create the folder structure following PSR standards."
msgstr ""

#: ..\..\manual\getting-started.rst:26
msgid ""
"Ok. What have you just done? **phpspec** has created the spec for you! You "
"can navigate to the spec folder and see the spec there:"
msgstr ""

#: ..\..\manual\getting-started.rst:46
msgid ""
"So what do you have here? Your spec extends the special ``ObjectBehavior`` "
"class. This class is special, because it gives you the ability to call all "
"the methods of the class you are describing and match the result of the "
"operations against your expectations."
msgstr ""

#: ..\..\manual\getting-started.rst:52
msgid "Examples"
msgstr ""

#: ..\..\manual\getting-started.rst:54
msgid ""
"The object behavior is made up of examples. Examples are encased in public "
"methods, started with ``it_``. or ``its_``. **phpspec** searches for these "
"methods in your specification to run. Why are underscores used in example "
"names? ``just_because_its_much_easier_to_read`` than "
"``someLongCamelCasingLikeThat``."
msgstr ""

#: ..\..\manual\getting-started.rst:62
msgid "Specifying behaviour"
msgstr ""

#: ..\..\manual\getting-started.rst:64
msgid ""
"Now we are ready to move on. Let's update that first example to express your"
" next intention:"
msgstr ""

#: ..\..\manual\getting-started.rst:82
msgid ""
"Here you are telling **phpspec** that your object has a ``toHtml`` method. "
"You are also telling it that this method should return \"<p>Hi, there</p>\"."
" Now what? Run the specs. You may not believe this, but **phpspec** will "
"understand you are describing a class that doesn't exist and offer to create"
" it!"
msgstr ""

#: ..\..\manual\getting-started.rst:98
msgid ""
"**phpspec** will then place the empty class in the directory. Run your spec "
"again and... OK, you guessed:"
msgstr ""

#: ..\..\manual\getting-started.rst:112
msgid ""
"What you just did was moving fast through the amber state into the red."
msgstr ""

#: ..\..\manual\getting-started.rst:126
msgid ""
"You got rid of the fatal errors and ugly messages that resulted from non-"
"existent classes and methods and went straight into a real failed spec:"
msgstr ""

#: ..\..\manual\getting-started.rst:142
msgid ""
"You can change the generated specs and classes using :doc:`templates "
"</cookbook/templates>`."
msgstr ""

#: ..\..\manual\getting-started.rst:144
msgid ""
"According to the TDD rules you now have full permission to write code. Red "
"means \"time to add code\"; red is great! Now you can add just enough code "
"to make the spec green, quickly. There will be time to get it right, but "
"first just get it green."
msgstr ""

#: ..\..\manual\getting-started.rst:161
msgid "And voilà:"
msgstr ""

#: ..\..\manual\getting-started.rst:174
msgid ""
"There are heaps of resources out there already if you would like to read "
"more about the TDD/SpecBDD cycle. Here are just a couple for you look at:"
msgstr ""

#: ..\..\manual\getting-started.rst:178
msgid ""
"`The Rspec Book <http://www.amazon.com/RSpec-Book-Behaviour-Development-"
"Cucumber/dp/1934356379>`_ Development with RSpec, Cucumber, and Friends by "
"David Chelimsky, Dave Astels, Zach Dennis, Aslak Hellesøy, Bryan Helmkamp, "
"Dan North"
msgstr ""

#: ..\..\manual\getting-started.rst:183
msgid ""
"`Test Driven Development: By Example <http://www.amazon.com/Test-Driven-"
"Development-Kent-Beck/dp/0321146530>`_ Kent Beck"
msgstr ""

#: ..\..\manual\getting-started.rst:186
msgid ""
"In the example here you specified the value the ``toHtml`` method should "
"return by using one of **phpspec's** matchers. There are several other "
"matchers available, you can read more about these in the :doc:`Matchers "
"Cookbook </cookbook/matchers>`"
msgstr ""

#: ..\..\manual\installation.rst:2
msgid "Installation"
msgstr ""

#: ..\..\manual\installation.rst:4
msgid ""
"**phpspec** is a php 5.3+ library that you'll have in your project "
"development environment. Before you begin, ensure that you have at least PHP"
" 5.3.3 installed."
msgstr ""

#: ..\..\manual\installation.rst:9
msgid "Method #1 (Composer)"
msgstr ""

#: ..\..\manual\installation.rst:11
msgid ""
"The simplest way to install phpspec with all its dependencies is through "
"Composer."
msgstr ""

#: ..\..\manual\installation.rst:14
msgid ""
"First, create a ``composer.json`` file in your project's root directory:"
msgstr ""

#: ..\..\manual\installation.rst:28
msgid "Then install phpspec with the composer install command:"
msgstr ""

#: ..\..\manual\installation.rst:34
msgid ""
"Follow instructions on `the composer website "
"<https://getcomposer.org/download/>`_ if you don't have it installed yet."
msgstr ""

#: ..\..\manual\installation.rst:37
msgid ""
"phpspec with its dependencies will be installed inside the ``vendor`` folder"
" and the phpspec executable will be linked into the ``bin`` folder."
msgstr ""

#: ..\..\manual\installation.rst:40
msgid ""
"In case your project already uses composer, simply add ``phpspec/phpspec`` "
"to the ``require-dev`` section and run:"
msgstr ""

#: ..\..\manual\introduction.rst:2
msgid "Introduction"
msgstr ""

#: ..\..\manual\introduction.rst:5
msgid "Spec BDD with phpspec"
msgstr ""

#: ..\..\manual\introduction.rst:7
msgid ""
"**phpspec** is a tool which can help you write clean and working PHP code "
"using behaviour driven development or BDD. BDD is a technique derived from "
"test-first development."
msgstr ""

#: ..\..\manual\introduction.rst:11
msgid ""
"BDD is a technique used at story level and spec level. **phpspec** is a tool"
" for use at the spec level or SpecBDD.  The technique is to first use a tool"
" like **phpspec** to describe the behaviour of an object you are about to "
"write. Next you write just enough code to meet that specification and "
"finally you refactor this code."
msgstr ""

#: ..\..\manual\introduction.rst:17
msgid "SpecBDD and TDD"
msgstr ""

#: ..\..\manual\introduction.rst:19
msgid ""
"There is no real difference between SpecBDD and TDD. The value of using an "
"xSpec tool instead of a regular xUnit tool for TDD is **the language**. The "
"early adopters of TDD focused on behaviour and design of code. Over time the"
" focus has shifted towards verification and structure. BDD aims to shift the"
" focus back by removing the language of testing. The concepts and features "
"of the tool will keep your focus on the \"right\" things."
msgstr ""

#: ..\..\manual\introduction.rst:27
msgid "SpecBDD and StoryBDD"
msgstr ""

#: ..\..\manual\introduction.rst:29
msgid ""
"StoryBDD tools like `Behat <http://behat.org>`_ help to understand and "
"clarify the domain. They help specify feature narratives, their needs, and "
"what we mean by them. With SpecBDD we are only focused on the how, in other "
"words, the implementation. You are specifying how your classes will achieve "
"those features."
msgstr ""

#: ..\..\manual\introduction.rst:34
msgid ""
"Only using story level BDD will not do enough to help you write the code for"
" the features well. Each feature is likely to need quite a lot of code. If "
"you only confirm that the whole feature works and also only refactor at that"
" point then you are working in large steps. SpecBDD tools guide you in the "
"process by letting you write the code in small steps. You only need to write"
" the spec and then the code for the next small part you want to work on and "
"not the whole feature."
msgstr ""

#: ..\..\manual\introduction.rst:42
msgid ""
"StoryBDD and SpecBDD used together are an effective way to achieve customer-"
"focused software."
msgstr ""

#: ..\..\manual\let-and-letgo.rst:2
msgid "Let and Let Go"
msgstr ""

#: ..\..\manual\let-and-letgo.rst:4
msgid ""
"If you need to pass the object into the constructor instead of a method then"
" you can do it like this:"
msgstr ""

#: ..\..\manual\let-and-letgo.rst:27
msgid ""
"If you have many examples then writing this in each example will get "
"tiresome. You can instead move this to a `let` method. The `let` method gets"
" run before each example so each time the parser gets constructed with a "
"fresh mock object."
msgstr ""

#: ..\..\manual\let-and-letgo.rst:49
msgid ""
"There is also a `letGo` method which runs after each example if you need to "
"clean up after the examples."
msgstr ""

#: ..\..\manual\let-and-letgo.rst:52
msgid ""
"It looks like you will now have difficulty getting hold of the instance of "
"the mock object in the examples. This is easier to deal with than it looks "
"though. Providing you use the same variable name for both, **phpspec** will "
"inject the same instance into the `let` method and the example. The "
"following will work:"
msgstr ""

#: ..\..\manual\prophet-objects.rst:2
msgid "Prophet Objects"
msgstr ""

#: ..\..\manual\prophet-objects.rst:5
msgid "Stubs"
msgstr ""

#: ..\..\manual\prophet-objects.rst:7
msgid ""
"You also need your `Markdown` parser to be able to format text fetched from "
"an external source such as a file. You decide to create an interface so that"
" you can have different implementations for different types of source."
msgstr ""

#: ..\..\manual\prophet-objects.rst:23
msgid ""
"You want to describe a method which has an instance of a `Reader` as an "
"argument. It will call ``Markdown\\Reader::getMarkdown()`` to get the "
"markdown to format. You have not yet written any implementations of Reader "
"to pass into the method though. You do not want to get distracted by "
"creating an implementation before you can carry on writing the parser. "
"Instead we can create a fake version of Reader called a stub and tell "
"**phpspec** what ``Markdown\\Reader::getMarkdown()`` should return."
msgstr ""

#: ..\..\manual\prophet-objects.rst:31
msgid ""
"You can create a stub by telling **phpspec** that you want it to be a double"
" of the `Markdown\\Reader` interface:"
msgstr ""

#: ..\..\manual\prophet-objects.rst:51
msgid ""
"At the moment calling ``Markdown\\Reader::getMarkdown()`` will return null. "
"We can tell **phpspec** what we want it to return though."
msgstr ""

#: ..\..\manual\prophet-objects.rst:73
msgid ""
"Now you can write the code that will get this example to pass. As well as "
"refactoring your implementation you should see if you can refactor your "
"specs once they are passing. In this case we can tidy it up a bit as "
"**phpspec** lets you create the stub in an easier way. You can pass in a "
"variable to the example and use an `@param` docblock to tell it what type it"
" should have:"
msgstr ""

#: ..\..\manual\prophet-objects.rst:100
msgid ""
"We can improve this further by instead using a type hint which **phpspec** "
"will use to determine the type of the stub:"
msgstr ""

#: ..\..\manual\prophet-objects.rst:123
msgid "Mocks"
msgstr ""

#: ..\..\manual\prophet-objects.rst:125
msgid ""
"You also need to be able to get your parser to output to somewhere instead "
"of just returning the formatted text. Again you create an interface:"
msgstr ""

#: ..\..\manual\prophet-objects.rst:139
msgid ""
"You again pass it to the method but this time the "
"``Markdown\\Writer::writeText($text)`` method does not return something to "
"your parser class. The new method you are going to create on the parser will"
" not return anything either. Instead it is going to give the formatted text "
"to the `Markdown\\Writer` so you want to be able to give an example of what "
"that formatted text should be. You can do this using a mock, the mock gets "
"created in the same way as the stub. This time you tell it to expect "
"``Markdown\\Writer::writeText($text)`` to get called with a particular "
"value:"
msgstr ""

#: ..\..\manual\prophet-objects.rst:167
msgid ""
"Now if the method is not called with that value then the example will fail."
msgstr ""

#: ..\..\manual\prophet-objects.rst:171
msgid "Spies"
msgstr ""

#: ..\..\manual\prophet-objects.rst:173
msgid ""
"Instead of using a mock you could use a spy. The difference is that you "
"check what happened after the object's behaviour has happened:"
msgstr ""

#: ..\..\manual\prophet-objects.rst:195
msgid ""
"The difference is one of style. You may prefer to use mocks and say what "
"should happen beforehand. You may prefer to use spies and say what should "
"have happened afterwards."
msgstr ""
